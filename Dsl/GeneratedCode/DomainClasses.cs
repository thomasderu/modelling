//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass SoSA
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.SoSA.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.SoSA.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0a5acf6f-1c84-4cdb-8307-35152f510bb4")]
	public partial class SoSA : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoSA domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a5acf6f, 0x1c84, 0x4cdb, 0x83, 0x07, 0x35, 0x15, 0x2f, 0x51, 0x0b, 0xb4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSA(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSA(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ImpactLevel.
		/// Description for Company.TestMart.SoSAHasImpactLevel.SoSA
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevels> ImpactLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(global::Company.TestMart.SoSAHasImpactLevel.SoSADomainRoleId);
			}
		}
		#endregion
		#region Legend opposite domain role accessor
		/// <summary>
		/// Gets or sets Legend.
		/// Description for Company.TestMart.SoSAHasLegend.SoSA
		/// </summary>
		public virtual Legend Legend
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.TestMart.SoSAHasLegend.SoSADomainRoleId) as Legend;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.TestMart.SoSAHasLegend.SoSADomainRoleId, value);
			}
		}
		#endregion
		#region TemporaryConcerned opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TemporaryConcerned.
		/// Description for Company.TestMart.SoSAHasTemporaryConcerned.SoSA
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TemporaryConcern> TemporaryConcerned
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TemporaryConcern>, TemporaryConcern>(global::Company.TestMart.SoSAHasTemporaryConcerned.SoSADomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.TestMart.ImpactLevels.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.TestMart.Legend.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: SoSAHasLegend.Legend
					if (this.Legend != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.TestMart.TemporaryConcern.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.TestMart.ImpactLevels sourceImpactLevels1 = sourceElement as global::Company.TestMart.ImpactLevels;
			if (sourceImpactLevels1 != null)
			{
				// Create link for path SoSAHasImpactLevel.ImpactLevel
				this.ImpactLevel.Add(sourceImpactLevels1);

				return;
			}
				
			global::Company.TestMart.Legend sourceLegend2 = sourceElement as global::Company.TestMart.Legend;
			if (sourceLegend2 != null)
			{
				// Create link for path SoSAHasLegend.Legend
				this.Legend = sourceLegend2;

				return;
			}
				
			global::Company.TestMart.TemporaryConcern sourceTemporaryConcern3 = sourceElement as global::Company.TestMart.TemporaryConcern;
			if (sourceTemporaryConcern3 != null)
			{
				// Create link for path SoSAHasTemporaryConcerned.TemporaryConcerned
				this.TemporaryConcerned.Add(sourceTemporaryConcern3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.TestMart.ImpactLevels sourceImpactLevels1 = sourceElement as global::Company.TestMart.ImpactLevels;
			if (sourceImpactLevels1 != null)
			{
				// Delete link for path SoSAHasImpactLevel.ImpactLevel
				
				foreach (DslModeling::ElementLink link in global::Company.TestMart.SoSAHasImpactLevel.GetLinks((global::Company.TestMart.SoSA)this, sourceImpactLevels1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.TestMart.SoSAHasImpactLevel.SoSADomainRoleId, global::Company.TestMart.SoSAHasImpactLevel.ImpactLevelsDomainRoleId);
				}

				return;
			}
				
			global::Company.TestMart.Legend sourceLegend2 = sourceElement as global::Company.TestMart.Legend;
			if (sourceLegend2 != null)
			{
				// Delete link for path SoSAHasLegend.Legend
				
				foreach (DslModeling::ElementLink link in global::Company.TestMart.SoSAHasLegend.GetLinks((global::Company.TestMart.SoSA)this, sourceLegend2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.TestMart.SoSAHasLegend.SoSADomainRoleId, global::Company.TestMart.SoSAHasLegend.LegendDomainRoleId);
				}

				return;
			}
				
			global::Company.TestMart.TemporaryConcern sourceTemporaryConcern3 = sourceElement as global::Company.TestMart.TemporaryConcern;
			if (sourceTemporaryConcern3 != null)
			{
				// Delete link for path SoSAHasTemporaryConcerned.TemporaryConcerned
				
				foreach (DslModeling::ElementLink link in global::Company.TestMart.SoSAHasTemporaryConcerned.GetLinks((global::Company.TestMart.SoSA)this, sourceTemporaryConcern3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.TestMart.SoSAHasTemporaryConcerned.SoSADomainRoleId, global::Company.TestMart.SoSAHasTemporaryConcerned.TemporaryConcernDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass ImpactImmediate
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ImpactImmediate.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ImpactImmediate.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("f3b749eb-136a-4956-b0cd-d1b565e13cd6")]
	public partial class ImpactImmediate : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactImmediate domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf3b749eb, 0x136a, 0x4956, 0xb0, 0xcd, 0xd1, 0xb5, 0x65, 0xe1, 0x3c, 0xd6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactImmediate(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactImmediate(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa772382b, 0x5a1c, 0x435b, 0xb2, 0xad, 0xba, 0x04, 0xea, 0xd5, 0x51, 0x91);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.ImpactImmediate.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactImmediate/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactImmediate/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a772382b-5a1c-435b-b2ad-ba04ead55191")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ImpactImmediate.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ImpactImmediate, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ImpactImmediate.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ImpactImmediate.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ImpactImmediate element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ImpactImmediate element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass SocialConcern
	/// Description for Company.TestMart.SocialConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.SocialConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.SocialConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("beefb504-550b-4f41-b4d8-a8eefd6f1526")]
	public partial class SocialConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SocialConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbeefb504, 0x550b, 0x4f41, 0xb4, 0xd8, 0xa8, 0xee, 0xfd, 0x6f, 0x15, 0x26);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x191eb0fc, 0xeb22, 0x40c4, 0x8c, 0xcb, 0xb8, 0x22, 0xc8, 0x85, 0xe8, 0x47);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "*add concern*";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.SocialConcern.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SocialConcern/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SocialConcern/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add concern*")]
		[DslModeling::DomainObjectId("191eb0fc-eb22-40c4-8ccb-b822c885e847")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SocialConcern.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<SocialConcern, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SocialConcern.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SocialConcern.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SocialConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SocialConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass EnvironmentalConcern
	/// Description for Company.TestMart.EnvironmentalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.EnvironmentalConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.EnvironmentalConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b9e7ce6-0858-4e57-80e6-e2d3716fae3e")]
	public partial class EnvironmentalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnvironmentalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b9e7ce6, 0x0858, 0x4e57, 0x80, 0xe6, 0xe2, 0xd3, 0x71, 0x6f, 0xae, 0x3e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x2271e7b4, 0xcde0, 0x4aeb, 0xbe, 0x64, 0x70, 0x48, 0x61, 0x95, 0xce, 0xaa);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "*add concern*";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.EnvironmentalConcern.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.EnvironmentalConcern/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.EnvironmentalConcern/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add concern*")]
		[DslModeling::DomainObjectId("2271e7b4-cde0-4aeb-be64-70486195ceaa")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnvironmentalConcern.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EnvironmentalConcern, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnvironmentalConcern.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnvironmentalConcern.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EnvironmentalConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnvironmentalConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass EconomicConcern
	/// Description for Company.TestMart.EconomicConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.EconomicConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.EconomicConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("396c8e99-afe7-4d09-9402-48edd3163546")]
	public partial class EconomicConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EconomicConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x396c8e99, 0xafe7, 0x4d09, 0x94, 0x02, 0x48, 0xed, 0xd3, 0x16, 0x35, 0x46);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x7b95dac3, 0x62d3, 0x4da3, 0x84, 0xe1, 0x31, 0x5e, 0x32, 0x3f, 0xd4, 0x94);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "*add concern*";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.EconomicConcern.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.EconomicConcern/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.EconomicConcern/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add concern*")]
		[DslModeling::DomainObjectId("7b95dac3-62d3-4da3-84e1-315e323fd494")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EconomicConcern.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EconomicConcern, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EconomicConcern.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EconomicConcern.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EconomicConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EconomicConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass TechnicalConcern
	/// Description for Company.TestMart.TechnicalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.TechnicalConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.TechnicalConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("482f4b9f-e0bb-4c93-94ac-fa2edf8790e0")]
	public partial class TechnicalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TechnicalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x482f4b9f, 0xe0bb, 0x4c93, 0x94, 0xac, 0xfa, 0x2e, 0xdf, 0x87, 0x90, 0xe0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x98ebb92f, 0x08e8, 0x44d1, 0x9a, 0x19, 0x50, 0x99, 0xa1, 0x05, 0x68, 0x6f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "*add concern*";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.TechnicalConcern.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.TechnicalConcern/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.TechnicalConcern/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add concern*")]
		[DslModeling::DomainObjectId("98ebb92f-08e8-44d1-9a19-5099a105686f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TechnicalConcern.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TechnicalConcern, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TechnicalConcern.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TechnicalConcern.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TechnicalConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TechnicalConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass Element
	/// Description for Company.TestMart.Element
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.Element.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.Element.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d456544b-e3e3-480a-8131-4b81db81910b")]
	public partial class Element : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Element domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd456544b, 0xe3e3, 0x480a, 0x81, 0x31, 0x4b, 0x81, 0xdb, 0x81, 0x91, 0x0b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Element(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Element(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TargetElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetElements.
		/// Description for Company.TestMart.ElementReferencesTargetElements.SourceElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Element> TargetElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Element>, Element>(global::Company.TestMart.ElementReferencesTargetElements.SourceElementDomainRoleId);
			}
		}
		#endregion
		#region SourceElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceElements.
		/// Description for Company.TestMart.ElementReferencesTargetElements.TargetElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Element> SourceElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Element>, Element>(global::Company.TestMart.ElementReferencesTargetElements.TargetElementDomainRoleId);
			}
		}
		#endregion
		#region ImpactLevels opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpactLevels.
		/// Description for Company.TestMart.ImpactLevelsHasElements.Element
		/// </summary>
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.TestMart.ImpactLevelsHasElements.ElementDomainRoleId) as ImpactLevels;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.TestMart.ImpactLevelsHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass Solution
	/// Description for Company.TestMart.Solution
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.Solution.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.Solution.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e659f591-3954-4113-ab89-4759861ba173")]
	public partial class Solution : Element
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Solution domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe659f591, 0x3954, 0x4113, 0xab, 0x89, 0x47, 0x59, 0x86, 0x1b, 0xa1, 0x73);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4f60711f, 0x388a, 0x48f5, 0xaa, 0xc3, 0x15, 0xad, 0x75, 0x4f, 0x16, 0x69);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "*add solution*";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.Solution.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.Solution/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.Solution/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add solution*")]
		[DslModeling::DomainObjectId("4f60711f-388a-48f5-aac3-15ad754f1669")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Solution.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Solution, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Solution.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Solution.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Solution element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Solution element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass ImpactStructural
	/// Description for Company.TestMart.ImpactStructural
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ImpactStructural.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ImpactStructural.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("00ebb6f1-cebf-43df-aed5-1b305758698b")]
	public partial class ImpactStructural : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactStructural domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x00ebb6f1, 0xcebf, 0x43df, 0xae, 0xd5, 0x1b, 0x30, 0x57, 0x58, 0x69, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactStructural(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactStructural(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8467cbac, 0x8e43, 0x4615, 0x94, 0xd8, 0x79, 0x3a, 0xaf, 0x99, 0xfc, 0x69);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.ImpactStructural.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactStructural/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactStructural/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8467cbac-8e43-4615-94d8-793aaf99fc69")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ImpactStructural.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ImpactStructural, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ImpactStructural.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ImpactStructural.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ImpactStructural element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ImpactStructural element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass ImpactLevels
	/// Description for Company.TestMart.ImpactLevels
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ImpactLevels.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ImpactLevels.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("13c745b1-40de-48b1-88fd-0c9562ec114c")]
	public partial class ImpactLevels : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactLevels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13c745b1, 0x40de, 0x48b1, 0x88, 0xfd, 0x0c, 0x95, 0x62, 0xec, 0x11, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevels(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevels(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// Description for Company.TestMart.ImpactLevelsHasElements.ImpactLevels
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Element> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Element>, Element>(global::Company.TestMart.ImpactLevelsHasElements.ImpactLevelsDomainRoleId);
			}
		}
		#endregion
		#region SoSA opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSA.
		/// Description for Company.TestMart.SoSAHasImpactLevel.ImpactLevels
		/// </summary>
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.TestMart.SoSAHasImpactLevel.ImpactLevelsDomainRoleId) as SoSA;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.TestMart.SoSAHasImpactLevel.ImpactLevelsDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.TestMart.Element.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.TestMart.Element sourceElement1 = sourceElement as global::Company.TestMart.Element;
			if (sourceElement1 != null)
			{
				// Create link for path ImpactLevelsHasElements.Elements
				this.Elements.Add(sourceElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.TestMart.Element sourceElement1 = sourceElement as global::Company.TestMart.Element;
			if (sourceElement1 != null)
			{
				// Delete link for path ImpactLevelsHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.TestMart.ImpactLevelsHasElements.GetLinks((global::Company.TestMart.ImpactLevels)this, sourceElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.TestMart.ImpactLevelsHasElements.ImpactLevelsDomainRoleId, global::Company.TestMart.ImpactLevelsHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass ImpactEnabling
	/// Description for Company.TestMart.ImpactEnabling
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ImpactEnabling.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ImpactEnabling.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ff74f75f-7df6-4691-9817-d7005e3f30ba")]
	public partial class ImpactEnabling : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactEnabling domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff74f75f, 0x7df6, 0x4691, 0x98, 0x17, 0xd7, 0x00, 0x5e, 0x3f, 0x30, 0xba);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactEnabling(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactEnabling(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x660ae282, 0x1c7c, 0x4d73, 0x94, 0xb0, 0xb3, 0x18, 0x76, 0x64, 0x1d, 0xac);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.TestMart.ImpactEnabling.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactEnabling/Name.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactEnabling/Name.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("660ae282-1c7c-4d73-94b0-b31876641dac")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ImpactEnabling.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ImpactEnabling, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ImpactEnabling.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ImpactEnabling.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ImpactEnabling element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ImpactEnabling element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass Concern
	/// Description for Company.TestMart.Concern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.Concern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.Concern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ec935230-be28-4105-94dc-59c8939eb7cd")]
	public partial class Concern : Element
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Concern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xec935230, 0xbe28, 0x4105, 0x94, 0xdc, 0x59, 0xc8, 0x93, 0x9e, 0xb7, 0xcd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass Legend
	/// Description for Company.TestMart.Legend
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.Legend.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.Legend.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1b22ac0a-6a6c-4769-8e0a-9ade0a56a916")]
	public partial class Legend : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Legend domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b22ac0a, 0x6a6c, 0x4769, 0x8e, 0x0a, 0x9a, 0xde, 0x0a, 0x56, 0xa9, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Legend(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Legend(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SoSA opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSA.
		/// Description for Company.TestMart.SoSAHasLegend.Legend
		/// </summary>
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.TestMart.SoSAHasLegend.LegendDomainRoleId) as SoSA;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.TestMart.SoSAHasLegend.LegendDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainClass TemporaryConcern
	/// Description for Company.TestMart.TemporaryConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.TemporaryConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.TemporaryConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fdb34555-2b30-4945-a4a7-d236f54cb26a")]
	public partial class TemporaryConcern : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TemporaryConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfdb34555, 0x2b30, 0x4945, 0xa4, 0xa7, 0xd2, 0x36, 0xf5, 0x4c, 0xb2, 0x6a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TemporaryConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TemporaryConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TempName domain property code
		
		/// <summary>
		/// TempName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TempNameDomainPropertyId = new global::System.Guid(0xfa279f03, 0xbaf8, 0x4aa2, 0x92, 0x49, 0x9e, 0x6a, 0xcd, 0xc4, 0x11, 0x78);
		
		/// <summary>
		/// Storage for TempName
		/// </summary>
		private global::System.String tempNamePropertyStorage = "*add concern*";
		
		/// <summary>
		/// Gets or sets the value of TempName domain property.
		/// Description for Company.TestMart.TemporaryConcern.Temp Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.TemporaryConcern/TempName.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.TemporaryConcern/TempName.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add concern*")]
		[DslModeling::DomainObjectId("fa279f03-baf8-4aa2-9249-9e6acdc41178")]
		public global::System.String TempName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tempNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TempNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TemporaryConcern.TempName domain property.
		/// </summary>
		internal sealed partial class TempNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TemporaryConcern, global::System.String>
		{
			private TempNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TemporaryConcern.TempName domain property value handler.
			/// </summary>
			public static readonly TempNamePropertyHandler Instance = new TempNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TemporaryConcern.TempName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TempNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TemporaryConcern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tempNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TemporaryConcern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tempNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SoSA opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSA.
		/// Description for Company.TestMart.SoSAHasTemporaryConcerned.TemporaryConcern
		/// </summary>
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.TestMart.SoSAHasTemporaryConcerned.TemporaryConcernDomainRoleId) as SoSA;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.TestMart.SoSAHasTemporaryConcerned.TemporaryConcernDomainRoleId, value);
			}
		}
		#endregion
	}
}
