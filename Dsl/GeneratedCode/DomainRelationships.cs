//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship SoSAHasImpactLevels
	/// Description for Company.TestMart.SoSAHasImpactLevels
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasImpactLevels.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.SoSAHasImpactLevels.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("43aa9e11-3b2e-4512-8c7c-a44fe4105743")]
	public partial class SoSAHasImpactLevels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSAHasImpactLevels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x43aa9e11, 0x3b2e, 0x4512, 0x8c, 0x7c, 0xa4, 0x4f, 0xe4, 0x10, 0x57, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSAHasImpactLevels link in the same Partition as the given SoSA
		/// </summary>
		/// <param name="source">SoSA to use as the source of the relationship.</param>
		/// <param name="target">ImpactLevels to use as the target of the relationship.</param>
		public SoSAHasImpactLevels(SoSA source, ImpactLevels target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSAHasImpactLevels.SoSADomainRoleId, source), new DslModeling::RoleAssignment(SoSAHasImpactLevels.ImpactLevelsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasImpactLevels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasImpactLevels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasImpactLevels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasImpactLevels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSA domain role code
		
		/// <summary>
		/// SoSA domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSADomainRoleId = new global::System.Guid(0x1ebbca36, 0x353b, 0x4c6c, 0x84, 0xd6, 0x83, 0xe4, 0x59, 0xb4, 0x41, 0x20);
		
		/// <summary>
		/// DomainRole SoSA
		/// Description for Company.TestMart.SoSAHasImpactLevels.SoSA
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasImpactLevels/SoSA.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasImpactLevels/SoSA.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpactLevel", PropertyDisplayNameKey="Company.TestMart.SoSAHasImpactLevels/SoSA.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1ebbca36-353b-4c6c-84d6-83e459b44120")]
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSA)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSADomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSADomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSA of a ImpactLevels
		/// <summary>
		/// Gets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSA GetSoSA(ImpactLevels element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpactLevelsDomainRoleId) as SoSA;
		}
		
		/// <summary>
		/// Sets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSA(ImpactLevels element, SoSA newSoSA)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpactLevelsDomainRoleId, newSoSA);
		}
		#endregion
		#region ImpactLevels domain role code
		
		/// <summary>
		/// ImpactLevels domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelsDomainRoleId = new global::System.Guid(0x75089eb9, 0xdace, 0x4571, 0x96, 0xc1, 0x4f, 0xf9, 0xa9, 0x3d, 0x2a, 0x59);
		
		/// <summary>
		/// DomainRole ImpactLevels
		/// Description for Company.TestMart.SoSAHasImpactLevels.ImpactLevels
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasImpactLevels/ImpactLevels.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasImpactLevels/ImpactLevels.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSA", PropertyDisplayNameKey="Company.TestMart.SoSAHasImpactLevels/ImpactLevels.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("75089eb9-dace-4571-96c1-4ff9a93d2a59")]
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevel of a SoSA
		/// <summary>
		/// Gets a list of ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevels> GetImpactLevel(SoSA element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(element, SoSADomainRoleId);
		}
		#endregion
		#region SoSA link accessor
		/// <summary>
		/// Get the list of SoSAHasImpactLevels links to a SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SoSAHasImpactLevels> GetLinksToImpactLevel ( global::Company.TestMart.SoSA soSAInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLevels>(soSAInstance, global::Company.TestMart.SoSAHasImpactLevels.SoSADomainRoleId);
		}
		#endregion
		#region ImpactLevels link accessor
		/// <summary>
		/// Get the SoSAHasImpactLevels link to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasImpactLevels GetLinkToSoSA (global::Company.TestMart.ImpactLevels impactLevelsInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasImpactLevels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLevels>(impactLevelsInstance, global::Company.TestMart.SoSAHasImpactLevels.ImpactLevelsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpactLevels not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSAHasImpactLevels instance accessors
		
		/// <summary>
		/// Get any SoSAHasImpactLevels links between a given SoSA and a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SoSAHasImpactLevels> GetLinks( global::Company.TestMart.SoSA source, global::Company.TestMart.ImpactLevels target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasImpactLevels> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasImpactLevels>();
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasImpactLevels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLevels>(source, global::Company.TestMart.SoSAHasImpactLevels.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasImpactLevels link in links )
			{
				if ( target.Equals(link.ImpactLevels) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSAHasImpactLevels link between a given SoSAand a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasImpactLevels GetLink( global::Company.TestMart.SoSA source, global::Company.TestMart.ImpactLevels target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasImpactLevels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLevels>(source, global::Company.TestMart.SoSAHasImpactLevels.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasImpactLevels link in links )
			{
				if ( target.Equals(link.ImpactLevels) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship SoSAHasLegend
	/// Description for Company.TestMart.SoSAHasLegend
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasLegend.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.SoSAHasLegend.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("950fc492-f810-4c48-9ed0-5bc920008319")]
	public partial class SoSAHasLegend : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSAHasLegend domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x950fc492, 0xf810, 0x4c48, 0x9e, 0xd0, 0x5b, 0xc9, 0x20, 0x00, 0x83, 0x19);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSAHasLegend link in the same Partition as the given SoSA
		/// </summary>
		/// <param name="source">SoSA to use as the source of the relationship.</param>
		/// <param name="target">Legend to use as the target of the relationship.</param>
		public SoSAHasLegend(SoSA source, Legend target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSAHasLegend.SoSADomainRoleId, source), new DslModeling::RoleAssignment(SoSAHasLegend.LegendDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasLegend(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasLegend(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasLegend(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasLegend(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSA domain role code
		
		/// <summary>
		/// SoSA domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSADomainRoleId = new global::System.Guid(0xf9fd5c9a, 0x0e45, 0x441d, 0x82, 0xce, 0x87, 0x2a, 0x4c, 0xe1, 0xe9, 0x93);
		
		/// <summary>
		/// DomainRole SoSA
		/// Description for Company.TestMart.SoSAHasLegend.SoSA
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasLegend/SoSA.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasLegend/SoSA.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Legend", PropertyDisplayNameKey="Company.TestMart.SoSAHasLegend/SoSA.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f9fd5c9a-0e45-441d-82ce-872a4ce1e993")]
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSA)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSADomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSADomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSA of a Legend
		/// <summary>
		/// Gets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSA GetSoSA(Legend element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LegendDomainRoleId) as SoSA;
		}
		
		/// <summary>
		/// Sets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSA(Legend element, SoSA newSoSA)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LegendDomainRoleId, newSoSA);
		}
		#endregion
		#region Legend domain role code
		
		/// <summary>
		/// Legend domain role Id.
		/// </summary>
		public static readonly global::System.Guid LegendDomainRoleId = new global::System.Guid(0xd57656c1, 0x600d, 0x4e3c, 0xb5, 0x29, 0x29, 0x4b, 0xf5, 0x79, 0xd6, 0x5b);
		
		/// <summary>
		/// DomainRole Legend
		/// Description for Company.TestMart.SoSAHasLegend.Legend
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasLegend/Legend.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasLegend/Legend.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSA", PropertyDisplayNameKey="Company.TestMart.SoSAHasLegend/Legend.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d57656c1-600d-4e3c-b529-294bf579d65b")]
		public virtual Legend Legend
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Legend)DslModeling::DomainRoleInfo.GetRolePlayer(this, LegendDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LegendDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Legend of a SoSA
		/// <summary>
		/// Gets Legend.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Legend GetLegend(SoSA element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SoSADomainRoleId) as Legend;
		}
		
		/// <summary>
		/// Sets Legend.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLegend(SoSA element, Legend newLegend)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SoSADomainRoleId, newLegend);
		}
		#endregion
		#region SoSA link accessor
		/// <summary>
		/// Get the SoSAHasLegend link to a SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasLegend GetLinkToLegend (global::Company.TestMart.SoSA soSAInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasLegend> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasLegend>(soSAInstance, global::Company.TestMart.SoSAHasLegend.SoSADomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SoSA not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Legend link accessor
		/// <summary>
		/// Get the SoSAHasLegend link to a Legend.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasLegend GetLinkToSoSA (global::Company.TestMart.Legend legendInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasLegend> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasLegend>(legendInstance, global::Company.TestMart.SoSAHasLegend.LegendDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Legend not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSAHasLegend instance accessors
		
		/// <summary>
		/// Get any SoSAHasLegend links between a given SoSA and a Legend.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SoSAHasLegend> GetLinks( global::Company.TestMart.SoSA source, global::Company.TestMart.Legend target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasLegend> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasLegend>();
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasLegend> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasLegend>(source, global::Company.TestMart.SoSAHasLegend.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasLegend link in links )
			{
				if ( target.Equals(link.Legend) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSAHasLegend link between a given SoSAand a Legend.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasLegend GetLink( global::Company.TestMart.SoSA source, global::Company.TestMart.Legend target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasLegend> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasLegend>(source, global::Company.TestMart.SoSAHasLegend.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasLegend link in links )
			{
				if ( target.Equals(link.Legend) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship ImpactImmediateHasSolution
	/// Description for Company.TestMart.ImpactImmediateHasSolution
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ImpactImmediateHasSolution.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ImpactImmediateHasSolution.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9c1dbacf-eb26-4873-b464-61fd4db93850")]
	public partial class ImpactImmediateHasSolution : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactImmediateHasSolution domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9c1dbacf, 0xeb26, 0x4873, 0xb4, 0x64, 0x61, 0xfd, 0x4d, 0xb9, 0x38, 0x50);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactImmediateHasSolution link in the same Partition as the given ImpactImmediate
		/// </summary>
		/// <param name="source">ImpactImmediate to use as the source of the relationship.</param>
		/// <param name="target">Solution to use as the target of the relationship.</param>
		public ImpactImmediateHasSolution(ImpactImmediate source, Solution target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactImmediateHasSolution.ImpactImmediateDomainRoleId, source), new DslModeling::RoleAssignment(ImpactImmediateHasSolution.SolutionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactImmediateHasSolution(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactImmediateHasSolution(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactImmediateHasSolution(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactImmediateHasSolution(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpactImmediate domain role code
		
		/// <summary>
		/// ImpactImmediate domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactImmediateDomainRoleId = new global::System.Guid(0xf3630c08, 0xc910, 0x4101, 0xa6, 0x8a, 0x55, 0x8c, 0x1e, 0x4c, 0x16, 0x46);
		
		/// <summary>
		/// DomainRole ImpactImmediate
		/// Description for Company.TestMart.ImpactImmediateHasSolution.ImpactImmediate
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactImmediateHasSolution/ImpactImmediate.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactImmediateHasSolution/ImpactImmediate.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Solution", PropertyDisplayNameKey="Company.TestMart.ImpactImmediateHasSolution/ImpactImmediate.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f3630c08-c910-4101-a68a-558c1e4c1646")]
		public virtual ImpactImmediate ImpactImmediate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactImmediate)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactImmediateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactImmediateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactImmediate of a Solution
		/// <summary>
		/// Gets ImpactImmediate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpactImmediate GetImpactImmediate(Solution element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SolutionDomainRoleId) as ImpactImmediate;
		}
		
		/// <summary>
		/// Sets ImpactImmediate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpactImmediate(Solution element, ImpactImmediate newImpactImmediate)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SolutionDomainRoleId, newImpactImmediate);
		}
		#endregion
		#region Solution domain role code
		
		/// <summary>
		/// Solution domain role Id.
		/// </summary>
		public static readonly global::System.Guid SolutionDomainRoleId = new global::System.Guid(0x643d00e4, 0xf6ec, 0x43d9, 0x90, 0xea, 0xee, 0x5a, 0xfa, 0xd1, 0x00, 0xc0);
		
		/// <summary>
		/// DomainRole Solution
		/// Description for Company.TestMart.ImpactImmediateHasSolution.Solution
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactImmediateHasSolution/Solution.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactImmediateHasSolution/Solution.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpactImmediate", PropertyDisplayNameKey="Company.TestMart.ImpactImmediateHasSolution/Solution.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("643d00e4-f6ec-43d9-90ea-ee5afad100c0")]
		public virtual Solution Solution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution)DslModeling::DomainRoleInfo.GetRolePlayer(this, SolutionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SolutionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Solution of a ImpactImmediate
		/// <summary>
		/// Gets Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Solution GetSolution(ImpactImmediate element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpactImmediateDomainRoleId) as Solution;
		}
		
		/// <summary>
		/// Sets Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSolution(ImpactImmediate element, Solution newSolution)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpactImmediateDomainRoleId, newSolution);
		}
		#endregion
		#region ImpactImmediate link accessor
		/// <summary>
		/// Get the ImpactImmediateHasSolution link to a ImpactImmediate.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ImpactImmediateHasSolution GetLinkToSolution (global::Company.TestMart.ImpactImmediate impactImmediateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactImmediateHasSolution> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactImmediateHasSolution>(impactImmediateInstance, global::Company.TestMart.ImpactImmediateHasSolution.ImpactImmediateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpactImmediate not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Solution link accessor
		/// <summary>
		/// Get the ImpactImmediateHasSolution link to a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ImpactImmediateHasSolution GetLinkToImpactImmediate (global::Company.TestMart.Solution solutionInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactImmediateHasSolution> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactImmediateHasSolution>(solutionInstance, global::Company.TestMart.ImpactImmediateHasSolution.SolutionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Solution not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpactImmediateHasSolution instance accessors
		
		/// <summary>
		/// Get any ImpactImmediateHasSolution links between a given ImpactImmediate and a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ImpactImmediateHasSolution> GetLinks( global::Company.TestMart.ImpactImmediate source, global::Company.TestMart.Solution target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.ImpactImmediateHasSolution> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.ImpactImmediateHasSolution>();
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactImmediateHasSolution> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactImmediateHasSolution>(source, global::Company.TestMart.ImpactImmediateHasSolution.ImpactImmediateDomainRoleId);
			foreach ( global::Company.TestMart.ImpactImmediateHasSolution link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactImmediateHasSolution link between a given ImpactImmediateand a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ImpactImmediateHasSolution GetLink( global::Company.TestMart.ImpactImmediate source, global::Company.TestMart.Solution target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactImmediateHasSolution> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactImmediateHasSolution>(source, global::Company.TestMart.ImpactImmediateHasSolution.ImpactImmediateDomainRoleId);
			foreach ( global::Company.TestMart.ImpactImmediateHasSolution link in links )
			{
				if ( target.Equals(link.Solution) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship SoSAHasTemporaryConcerns
	/// Description for Company.TestMart.SoSAHasTemporaryConcerns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasTemporaryConcerns.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.SoSAHasTemporaryConcerns.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("defad783-e425-4e89-93cf-d498aea060b1")]
	public partial class SoSAHasTemporaryConcerns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSAHasTemporaryConcerns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdefad783, 0xe425, 0x4e89, 0x93, 0xcf, 0xd4, 0x98, 0xae, 0xa0, 0x60, 0xb1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSAHasTemporaryConcerns link in the same Partition as the given SoSA
		/// </summary>
		/// <param name="source">SoSA to use as the source of the relationship.</param>
		/// <param name="target">TemporaryConcern to use as the target of the relationship.</param>
		public SoSAHasTemporaryConcerns(SoSA source, TemporaryConcern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSAHasTemporaryConcerns.SoSADomainRoleId, source), new DslModeling::RoleAssignment(SoSAHasTemporaryConcerns.TemporaryConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasTemporaryConcerns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasTemporaryConcerns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasTemporaryConcerns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasTemporaryConcerns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSA domain role code
		
		/// <summary>
		/// SoSA domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSADomainRoleId = new global::System.Guid(0x81d1fdc5, 0x8f66, 0x494e, 0x91, 0xcb, 0x57, 0xcd, 0x53, 0x90, 0xe2, 0xfb);
		
		/// <summary>
		/// DomainRole SoSA
		/// Description for Company.TestMart.SoSAHasTemporaryConcerns.SoSA
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasTemporaryConcerns/SoSA.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasTemporaryConcerns/SoSA.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TemporaryConcerned", PropertyDisplayNameKey="Company.TestMart.SoSAHasTemporaryConcerns/SoSA.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("81d1fdc5-8f66-494e-91cb-57cd5390e2fb")]
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSA)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSADomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSADomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSA of a TemporaryConcern
		/// <summary>
		/// Gets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSA GetSoSA(TemporaryConcern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TemporaryConcernDomainRoleId) as SoSA;
		}
		
		/// <summary>
		/// Sets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSA(TemporaryConcern element, SoSA newSoSA)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TemporaryConcernDomainRoleId, newSoSA);
		}
		#endregion
		#region TemporaryConcern domain role code
		
		/// <summary>
		/// TemporaryConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid TemporaryConcernDomainRoleId = new global::System.Guid(0x0f701701, 0xbdb2, 0x4188, 0x8c, 0xb8, 0xe9, 0x3a, 0x45, 0xb9, 0xd0, 0xaa);
		
		/// <summary>
		/// DomainRole TemporaryConcern
		/// Description for Company.TestMart.SoSAHasTemporaryConcerns.TemporaryConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasTemporaryConcerns/TemporaryConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasTemporaryConcerns/TemporaryConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSA", PropertyDisplayNameKey="Company.TestMart.SoSAHasTemporaryConcerns/TemporaryConcern.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0f701701-bdb2-4188-8cb8-e93a45b9d0aa")]
		public virtual TemporaryConcern TemporaryConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TemporaryConcern)DslModeling::DomainRoleInfo.GetRolePlayer(this, TemporaryConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TemporaryConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TemporaryConcerned of a SoSA
		/// <summary>
		/// Gets a list of TemporaryConcerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TemporaryConcern> GetTemporaryConcerned(SoSA element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TemporaryConcern>, TemporaryConcern>(element, SoSADomainRoleId);
		}
		#endregion
		#region SoSA link accessor
		/// <summary>
		/// Get the list of SoSAHasTemporaryConcerns links to a SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SoSAHasTemporaryConcerns> GetLinksToTemporaryConcerned ( global::Company.TestMart.SoSA soSAInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasTemporaryConcerns>(soSAInstance, global::Company.TestMart.SoSAHasTemporaryConcerns.SoSADomainRoleId);
		}
		#endregion
		#region TemporaryConcern link accessor
		/// <summary>
		/// Get the SoSAHasTemporaryConcerns link to a TemporaryConcern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasTemporaryConcerns GetLinkToSoSA (global::Company.TestMart.TemporaryConcern temporaryConcernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasTemporaryConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasTemporaryConcerns>(temporaryConcernInstance, global::Company.TestMart.SoSAHasTemporaryConcerns.TemporaryConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TemporaryConcern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSAHasTemporaryConcerns instance accessors
		
		/// <summary>
		/// Get any SoSAHasTemporaryConcerns links between a given SoSA and a TemporaryConcern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SoSAHasTemporaryConcerns> GetLinks( global::Company.TestMart.SoSA source, global::Company.TestMart.TemporaryConcern target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasTemporaryConcerns> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasTemporaryConcerns>();
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasTemporaryConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasTemporaryConcerns>(source, global::Company.TestMart.SoSAHasTemporaryConcerns.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasTemporaryConcerns link in links )
			{
				if ( target.Equals(link.TemporaryConcern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSAHasTemporaryConcerns link between a given SoSAand a TemporaryConcern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasTemporaryConcerns GetLink( global::Company.TestMart.SoSA source, global::Company.TestMart.TemporaryConcern target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasTemporaryConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasTemporaryConcerns>(source, global::Company.TestMart.SoSAHasTemporaryConcerns.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasTemporaryConcerns link in links )
			{
				if ( target.Equals(link.TemporaryConcern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship ImpactLevelsHasConcerns
	/// Description for Company.TestMart.ImpactLevelsHasConcerns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ImpactLevelsHasConcerns.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ImpactLevelsHasConcerns.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4a0610fa-9675-4239-9e3e-dcbe3b0759a6")]
	public partial class ImpactLevelsHasConcerns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelsHasConcerns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a0610fa, 0x9675, 0x4239, 0x9e, 0x3e, 0xdc, 0xbe, 0x3b, 0x07, 0x59, 0xa6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelsHasConcerns link in the same Partition as the given ImpactLevels
		/// </summary>
		/// <param name="source">ImpactLevels to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public ImpactLevelsHasConcerns(ImpactLevels source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelsHasConcerns.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasConcerns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasConcerns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasConcerns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasConcerns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevels domain role code
		
		/// <summary>
		/// ImpactLevels domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelsDomainRoleId = new global::System.Guid(0x58e55dc6, 0x5f53, 0x4c73, 0x9d, 0x59, 0xdf, 0x15, 0xfa, 0x61, 0x54, 0x4e);
		
		/// <summary>
		/// DomainRole ImpactLevels
		/// Description for Company.TestMart.ImpactLevelsHasConcerns.ImpactLevels
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactLevelsHasConcerns/ImpactLevels.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactLevelsHasConcerns/ImpactLevels.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concerns", PropertyDisplayNameKey="Company.TestMart.ImpactLevelsHasConcerns/ImpactLevels.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("58e55dc6-5f53-4c73-9d59-df15fa61544e")]
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevels of a Concern
		/// <summary>
		/// Gets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpactLevels GetImpactLevels(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as ImpactLevels;
		}
		
		/// <summary>
		/// Sets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpactLevels(Concern element, ImpactLevels newImpactLevels)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newImpactLevels);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0x6a306ca2, 0x91c7, 0x4677, 0x8e, 0x1a, 0x74, 0x1b, 0x6e, 0x7b, 0x28, 0xe0);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.TestMart.ImpactLevelsHasConcerns.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactLevelsHasConcerns/Concern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactLevelsHasConcerns/Concern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpactLevels", PropertyDisplayNameKey="Company.TestMart.ImpactLevelsHasConcerns/Concern.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6a306ca2-91c7-4677-8e1a-741b6e7b28e0")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concerns of a ImpactLevels
		/// <summary>
		/// Gets a list of Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetConcerns(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, ImpactLevelsDomainRoleId);
		}
		#endregion
		#region ImpactLevels link accessor
		/// <summary>
		/// Get the list of ImpactLevelsHasConcerns links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ImpactLevelsHasConcerns> GetLinksToConcerns ( global::Company.TestMart.ImpactLevels impactLevelsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelsHasConcerns>(impactLevelsInstance, global::Company.TestMart.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the ImpactLevelsHasConcerns link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ImpactLevelsHasConcerns GetLinkToImpactLevels (global::Company.TestMart.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactLevelsHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelsHasConcerns>(concernInstance, global::Company.TestMart.ImpactLevelsHasConcerns.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpactLevelsHasConcerns instance accessors
		
		/// <summary>
		/// Get any ImpactLevelsHasConcerns links between a given ImpactLevels and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ImpactLevelsHasConcerns> GetLinks( global::Company.TestMart.ImpactLevels source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.ImpactLevelsHasConcerns> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.ImpactLevelsHasConcerns>();
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactLevelsHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelsHasConcerns>(source, global::Company.TestMart.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId);
			foreach ( global::Company.TestMart.ImpactLevelsHasConcerns link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelsHasConcerns link between a given ImpactLevelsand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ImpactLevelsHasConcerns GetLink( global::Company.TestMart.ImpactLevels source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactLevelsHasConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelsHasConcerns>(source, global::Company.TestMart.ImpactLevelsHasConcerns.ImpactLevelsDomainRoleId);
			foreach ( global::Company.TestMart.ImpactLevelsHasConcerns link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship SolutionReferencesConcerns
	/// Description for Company.TestMart.SolutionReferencesConcerns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.SolutionReferencesConcerns.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.SolutionReferencesConcerns.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9dcea834-357c-4fe5-8d6a-55f499bb360a")]
	public partial class SolutionReferencesConcerns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SolutionReferencesConcerns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9dcea834, 0x357c, 0x4fe5, 0x8d, 0x6a, 0x55, 0xf4, 0x99, 0xbb, 0x36, 0x0a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SolutionReferencesConcerns link in the same Partition as the given Solution
		/// </summary>
		/// <param name="source">Solution to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public SolutionReferencesConcerns(Solution source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SolutionReferencesConcerns.SolutionDomainRoleId, source), new DslModeling::RoleAssignment(SolutionReferencesConcerns.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SolutionReferencesConcerns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SolutionReferencesConcerns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SolutionReferencesConcerns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SolutionReferencesConcerns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Solution domain role code
		
		/// <summary>
		/// Solution domain role Id.
		/// </summary>
		public static readonly global::System.Guid SolutionDomainRoleId = new global::System.Guid(0xaa3f5c53, 0xaac2, 0x4a26, 0xbb, 0x00, 0xdf, 0x69, 0xc9, 0x9e, 0x41, 0x4f);
		
		/// <summary>
		/// DomainRole Solution
		/// Description for Company.TestMart.SolutionReferencesConcerns.Solution
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SolutionReferencesConcerns/Solution.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SolutionReferencesConcerns/Solution.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concerns", PropertyDisplayNameKey="Company.TestMart.SolutionReferencesConcerns/Solution.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("aa3f5c53-aac2-4a26-bb00-df69c99e414f")]
		public virtual Solution Solution
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution)DslModeling::DomainRoleInfo.GetRolePlayer(this, SolutionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SolutionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Solution of a Concern
		/// <summary>
		/// Gets Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Solution GetSolution(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as Solution;
		}
		
		/// <summary>
		/// Sets Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSolution(Concern element, Solution newSolution)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newSolution);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0xe5663cb6, 0x8da7, 0x4a8c, 0xb4, 0x5b, 0xe3, 0x3c, 0x8e, 0x66, 0x04, 0x82);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.TestMart.SolutionReferencesConcerns.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SolutionReferencesConcerns/Concern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SolutionReferencesConcerns/Concern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Solution", PropertyDisplayNameKey="Company.TestMart.SolutionReferencesConcerns/Concern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e5663cb6-8da7-4a8c-b45b-e33c8e660482")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concerns of a Solution
		/// <summary>
		/// Gets a list of Concerns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetConcerns(Solution element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SolutionDomainRoleId);
		}
		#endregion
		#region Sign domain property code
		
		/// <summary>
		/// Sign domain property Id.
		/// </summary>
		public static readonly global::System.Guid SignDomainPropertyId = new global::System.Guid(0xe70bc6dc, 0x0058, 0x43ff, 0xb7, 0x3e, 0x61, 0x7c, 0xb1, 0xd0, 0x2f, 0xbc);
		
		/// <summary>
		/// Storage for Sign
		/// </summary>
		private global::System.String signPropertyStorage = "*add sign*";
		
		/// <summary>
		/// Gets or sets the value of Sign domain property.
		/// Description for Company.TestMart.SolutionReferencesConcerns.Sign
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SolutionReferencesConcerns/Sign.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SolutionReferencesConcerns/Sign.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add sign*")]
		[DslModeling::DomainObjectId("e70bc6dc-0058-43ff-b73e-617cb1d02fbc")]
		public global::System.String Sign
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return signPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SignPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SolutionReferencesConcerns.Sign domain property.
		/// </summary>
		internal sealed partial class SignPropertyHandler : DslModeling::DomainPropertyValueHandler<SolutionReferencesConcerns, global::System.String>
		{
			private SignPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SolutionReferencesConcerns.Sign domain property value handler.
			/// </summary>
			public static readonly SignPropertyHandler Instance = new SignPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SolutionReferencesConcerns.Sign domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SignDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SolutionReferencesConcerns element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.signPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SolutionReferencesConcerns element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.signPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Solution link accessor
		/// <summary>
		/// Get the list of SolutionReferencesConcerns links to a Solution.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SolutionReferencesConcerns> GetLinksToConcerns ( global::Company.TestMart.Solution solutionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SolutionReferencesConcerns>(solutionInstance, global::Company.TestMart.SolutionReferencesConcerns.SolutionDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the SolutionReferencesConcerns link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SolutionReferencesConcerns GetLinkToSolution (global::Company.TestMart.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SolutionReferencesConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SolutionReferencesConcerns>(concernInstance, global::Company.TestMart.SolutionReferencesConcerns.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SolutionReferencesConcerns instance accessors
		
		/// <summary>
		/// Get any SolutionReferencesConcerns links between a given Solution and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SolutionReferencesConcerns> GetLinks( global::Company.TestMart.Solution source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.SolutionReferencesConcerns> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.SolutionReferencesConcerns>();
			global::System.Collections.Generic.IList<global::Company.TestMart.SolutionReferencesConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SolutionReferencesConcerns>(source, global::Company.TestMart.SolutionReferencesConcerns.SolutionDomainRoleId);
			foreach ( global::Company.TestMart.SolutionReferencesConcerns link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SolutionReferencesConcerns link between a given Solutionand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SolutionReferencesConcerns GetLink( global::Company.TestMart.Solution source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SolutionReferencesConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SolutionReferencesConcerns>(source, global::Company.TestMart.SolutionReferencesConcerns.SolutionDomainRoleId);
			foreach ( global::Company.TestMart.SolutionReferencesConcerns link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship ConcernReferencesTargetConcerns
	/// Description for Company.TestMart.ConcernReferencesTargetConcerns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ConcernReferencesTargetConcerns.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ConcernReferencesTargetConcerns.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("50588f75-0289-4023-93bd-9b2b2e387ae1")]
	public partial class ConcernReferencesTargetConcerns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConcernReferencesTargetConcerns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x50588f75, 0x0289, 0x4023, 0x93, 0xbd, 0x9b, 0x2b, 0x2e, 0x38, 0x7a, 0xe1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConcernReferencesTargetConcerns link in the same Partition as the given Concern
		/// </summary>
		/// <param name="source">Concern to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public ConcernReferencesTargetConcerns(Concern source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConcernReferencesTargetConcerns.SourceConcernDomainRoleId, source), new DslModeling::RoleAssignment(ConcernReferencesTargetConcerns.TargetConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConcernReferencesTargetConcerns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConcernReferencesTargetConcerns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConcernReferencesTargetConcerns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConcernReferencesTargetConcerns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcern domain role code
		
		/// <summary>
		/// SourceConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernDomainRoleId = new global::System.Guid(0x00ac4eee, 0x796c, 0x4361, 0x84, 0x6f, 0x0c, 0x04, 0xf7, 0xe8, 0x97, 0xbd);
		
		/// <summary>
		/// DomainRole SourceConcern
		/// Description for Company.TestMart.ConcernReferencesTargetConcerns.SourceConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ConcernReferencesTargetConcerns/SourceConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ConcernReferencesTargetConcerns/SourceConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerned", PropertyDisplayNameKey="Company.TestMart.ConcernReferencesTargetConcerns/SourceConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("00ac4eee-796c-4361-846f-0c04f7e897bd")]
		public virtual Concern SourceConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConcerned of a Concern
		/// <summary>
		/// Gets a list of SourceConcerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetSourceConcerned(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, TargetConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern domain role code
		
		/// <summary>
		/// TargetConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernDomainRoleId = new global::System.Guid(0x63606090, 0x27c7, 0x4caa, 0x90, 0x63, 0x3c, 0x46, 0xda, 0xd4, 0x29, 0x23);
		
		/// <summary>
		/// DomainRole TargetConcern
		/// Description for Company.TestMart.ConcernReferencesTargetConcerns.TargetConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ConcernReferencesTargetConcerns/TargetConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ConcernReferencesTargetConcerns/TargetConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConcerned", PropertyDisplayNameKey="Company.TestMart.ConcernReferencesTargetConcerns/TargetConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("63606090-27c7-4caa-9063-3c46dad42923")]
		public virtual Concern TargetConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerned of a Concern
		/// <summary>
		/// Gets a list of TargetConcerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerned(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SourceConcernDomainRoleId);
		}
		#endregion
		#region Sign domain property code
		
		/// <summary>
		/// Sign domain property Id.
		/// </summary>
		public static readonly global::System.Guid SignDomainPropertyId = new global::System.Guid(0x19802c3f, 0x11db, 0x4b63, 0xa4, 0xfd, 0x44, 0x93, 0x55, 0x56, 0x9b, 0x00);
		
		/// <summary>
		/// Storage for Sign
		/// </summary>
		private global::System.String signPropertyStorage = "*add sign*";
		
		/// <summary>
		/// Gets or sets the value of Sign domain property.
		/// Description for Company.TestMart.ConcernReferencesTargetConcerns.Sign
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ConcernReferencesTargetConcerns/Sign.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ConcernReferencesTargetConcerns/Sign.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*add sign*")]
		[DslModeling::DomainObjectId("19802c3f-11db-4b63-a4fd-449355569b00")]
		public global::System.String Sign
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return signPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SignPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConcernReferencesTargetConcerns.Sign domain property.
		/// </summary>
		internal sealed partial class SignPropertyHandler : DslModeling::DomainPropertyValueHandler<ConcernReferencesTargetConcerns, global::System.String>
		{
			private SignPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConcernReferencesTargetConcerns.Sign domain property value handler.
			/// </summary>
			public static readonly SignPropertyHandler Instance = new SignPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConcernReferencesTargetConcerns.Sign domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SignDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConcernReferencesTargetConcerns element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.signPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConcernReferencesTargetConcerns element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.signPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceConcern link accessor
		/// <summary>
		/// Get the list of ConcernReferencesTargetConcerns links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ConcernReferencesTargetConcerns> GetLinksToTargetConcerned ( global::Company.TestMart.Concern sourceConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerns>(sourceConcernInstance, global::Company.TestMart.ConcernReferencesTargetConcerns.SourceConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern link accessor
		/// <summary>
		/// Get the list of ConcernReferencesTargetConcerns links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ConcernReferencesTargetConcerns> GetLinksToSourceConcerned ( global::Company.TestMart.Concern targetConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerns>(targetConcernInstance, global::Company.TestMart.ConcernReferencesTargetConcerns.TargetConcernDomainRoleId);
		}
		#endregion
		#region ConcernReferencesTargetConcerns instance accessors
		
		/// <summary>
		/// Get any ConcernReferencesTargetConcerns links between a given Concern and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ConcernReferencesTargetConcerns> GetLinks( global::Company.TestMart.Concern source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.ConcernReferencesTargetConcerns> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.ConcernReferencesTargetConcerns>();
			global::System.Collections.Generic.IList<global::Company.TestMart.ConcernReferencesTargetConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerns>(source, global::Company.TestMart.ConcernReferencesTargetConcerns.SourceConcernDomainRoleId);
			foreach ( global::Company.TestMart.ConcernReferencesTargetConcerns link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConcernReferencesTargetConcerns link between a given Concernand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ConcernReferencesTargetConcerns GetLink( global::Company.TestMart.Concern source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ConcernReferencesTargetConcerns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerns>(source, global::Company.TestMart.ConcernReferencesTargetConcerns.SourceConcernDomainRoleId);
			foreach ( global::Company.TestMart.ConcernReferencesTargetConcerns link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
