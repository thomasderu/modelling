//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship SoSAHasImpactLeveled
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasImpactLeveled.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.SoSAHasImpactLeveled.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ebec6116-1e80-4a8a-b1b6-204621a91229")]
	public partial class SoSAHasImpactLeveled : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSAHasImpactLeveled domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xebec6116, 0x1e80, 0x4a8a, 0xb1, 0xb6, 0x20, 0x46, 0x21, 0xa9, 0x12, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSAHasImpactLeveled link in the same Partition as the given SoSA
		/// </summary>
		/// <param name="source">SoSA to use as the source of the relationship.</param>
		/// <param name="target">ImpactLevel to use as the target of the relationship.</param>
		public SoSAHasImpactLeveled(SoSA source, ImpactLevel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSAHasImpactLeveled.SoSADomainRoleId, source), new DslModeling::RoleAssignment(SoSAHasImpactLeveled.ImpactLevelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasImpactLeveled(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasImpactLeveled(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasImpactLeveled(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasImpactLeveled(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSA domain role code
		
		/// <summary>
		/// SoSA domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSADomainRoleId = new global::System.Guid(0xfcae1d82, 0x8e37, 0x44c9, 0x83, 0x6a, 0x70, 0x4f, 0xc0, 0xc4, 0x11, 0xb7);
		
		/// <summary>
		/// DomainRole SoSA
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasImpactLeveled/SoSA.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasImpactLeveled/SoSA.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpactLeveled", PropertyDisplayNameKey="Company.TestMart.SoSAHasImpactLeveled/SoSA.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fcae1d82-8e37-44c9-836a-704fc0c411b7")]
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSA)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSADomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSADomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSA of a ImpactLevel
		/// <summary>
		/// Gets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSA GetSoSA(ImpactLevel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpactLevelDomainRoleId) as SoSA;
		}
		
		/// <summary>
		/// Sets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSA(ImpactLevel element, SoSA newSoSA)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpactLevelDomainRoleId, newSoSA);
		}
		#endregion
		#region ImpactLevel domain role code
		
		/// <summary>
		/// ImpactLevel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelDomainRoleId = new global::System.Guid(0xd8e314e9, 0x67ec, 0x4f42, 0x9b, 0xcb, 0x3b, 0x8e, 0x93, 0x41, 0x78, 0xc9);
		
		/// <summary>
		/// DomainRole ImpactLevel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.SoSAHasImpactLeveled/ImpactLevel.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.SoSAHasImpactLeveled/ImpactLevel.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSA", PropertyDisplayNameKey="Company.TestMart.SoSAHasImpactLeveled/ImpactLevel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d8e314e9-67ec-4f42-9bcb-3b8e934178c9")]
		public virtual ImpactLevel ImpactLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLeveled of a SoSA
		/// <summary>
		/// Gets a list of ImpactLeveled.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevel> GetImpactLeveled(SoSA element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevel>, ImpactLevel>(element, SoSADomainRoleId);
		}
		#endregion
		#region SoSA link accessor
		/// <summary>
		/// Get the list of SoSAHasImpactLeveled links to a SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SoSAHasImpactLeveled> GetLinksToImpactLeveled ( global::Company.TestMart.SoSA soSAInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLeveled>(soSAInstance, global::Company.TestMart.SoSAHasImpactLeveled.SoSADomainRoleId);
		}
		#endregion
		#region ImpactLevel link accessor
		/// <summary>
		/// Get the SoSAHasImpactLeveled link to a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasImpactLeveled GetLinkToSoSA (global::Company.TestMart.ImpactLevel impactLevelInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasImpactLeveled> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLeveled>(impactLevelInstance, global::Company.TestMart.SoSAHasImpactLeveled.ImpactLevelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpactLevel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSAHasImpactLeveled instance accessors
		
		/// <summary>
		/// Get any SoSAHasImpactLeveled links between a given SoSA and a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.SoSAHasImpactLeveled> GetLinks( global::Company.TestMart.SoSA source, global::Company.TestMart.ImpactLevel target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasImpactLeveled> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.SoSAHasImpactLeveled>();
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasImpactLeveled> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLeveled>(source, global::Company.TestMart.SoSAHasImpactLeveled.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasImpactLeveled link in links )
			{
				if ( target.Equals(link.ImpactLevel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSAHasImpactLeveled link between a given SoSAand a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.SoSAHasImpactLeveled GetLink( global::Company.TestMart.SoSA source, global::Company.TestMart.ImpactLevel target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.SoSAHasImpactLeveled> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.SoSAHasImpactLeveled>(source, global::Company.TestMart.SoSAHasImpactLeveled.SoSADomainRoleId);
			foreach ( global::Company.TestMart.SoSAHasImpactLeveled link in links )
			{
				if ( target.Equals(link.ImpactLevel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship ConcernReferencesTargetConcerned
	/// Description for Company.TestMart.ConcernReferencesTargetConcerned
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ConcernReferencesTargetConcerned.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ConcernReferencesTargetConcerned.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a49f47b6-cb34-4a1e-b8c3-e321e303f5f2")]
	public partial class ConcernReferencesTargetConcerned : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConcernReferencesTargetConcerned domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa49f47b6, 0xcb34, 0x4a1e, 0xb8, 0xc3, 0xe3, 0x21, 0xe3, 0x03, 0xf5, 0xf2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConcernReferencesTargetConcerned link in the same Partition as the given Concern
		/// </summary>
		/// <param name="source">Concern to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public ConcernReferencesTargetConcerned(Concern source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConcernReferencesTargetConcerned.SourceConcernDomainRoleId, source), new DslModeling::RoleAssignment(ConcernReferencesTargetConcerned.TargetConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcern domain role code
		
		/// <summary>
		/// SourceConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernDomainRoleId = new global::System.Guid(0x1df2014b, 0xdf0b, 0x4308, 0x8c, 0xc4, 0x9a, 0x1d, 0xb7, 0xf7, 0x3f, 0xd5);
		
		/// <summary>
		/// DomainRole SourceConcern
		/// Description for Company.TestMart.ConcernReferencesTargetConcerned.SourceConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ConcernReferencesTargetConcerned/SourceConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ConcernReferencesTargetConcerned/SourceConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerned", PropertyDisplayNameKey="Company.TestMart.ConcernReferencesTargetConcerned/SourceConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1df2014b-df0b-4308-8cc4-9a1db7f73fd5")]
		public virtual Concern SourceConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConcerned of a Concern
		/// <summary>
		/// Gets a list of SourceConcerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetSourceConcerned(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, TargetConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern domain role code
		
		/// <summary>
		/// TargetConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernDomainRoleId = new global::System.Guid(0xc9d452d0, 0xbdd0, 0x4f47, 0xb3, 0x1b, 0x4f, 0xaf, 0xd8, 0x70, 0x58, 0x69);
		
		/// <summary>
		/// DomainRole TargetConcern
		/// Description for Company.TestMart.ConcernReferencesTargetConcerned.TargetConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ConcernReferencesTargetConcerned/TargetConcern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ConcernReferencesTargetConcerned/TargetConcern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConcerned", PropertyDisplayNameKey="Company.TestMart.ConcernReferencesTargetConcerned/TargetConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c9d452d0-bdd0-4f47-b31b-4fafd8705869")]
		public virtual Concern TargetConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerned of a Concern
		/// <summary>
		/// Gets a list of TargetConcerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerned(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SourceConcernDomainRoleId);
		}
		#endregion
		#region SourceConcern link accessor
		/// <summary>
		/// Get the list of ConcernReferencesTargetConcerned links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ConcernReferencesTargetConcerned> GetLinksToTargetConcerned ( global::Company.TestMart.Concern sourceConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerned>(sourceConcernInstance, global::Company.TestMart.ConcernReferencesTargetConcerned.SourceConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern link accessor
		/// <summary>
		/// Get the list of ConcernReferencesTargetConcerned links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ConcernReferencesTargetConcerned> GetLinksToSourceConcerned ( global::Company.TestMart.Concern targetConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerned>(targetConcernInstance, global::Company.TestMart.ConcernReferencesTargetConcerned.TargetConcernDomainRoleId);
		}
		#endregion
		#region ConcernReferencesTargetConcerned instance accessors
		
		/// <summary>
		/// Get any ConcernReferencesTargetConcerned links between a given Concern and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ConcernReferencesTargetConcerned> GetLinks( global::Company.TestMart.Concern source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.ConcernReferencesTargetConcerned> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.ConcernReferencesTargetConcerned>();
			global::System.Collections.Generic.IList<global::Company.TestMart.ConcernReferencesTargetConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerned>(source, global::Company.TestMart.ConcernReferencesTargetConcerned.SourceConcernDomainRoleId);
			foreach ( global::Company.TestMart.ConcernReferencesTargetConcerned link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConcernReferencesTargetConcerned link between a given Concernand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ConcernReferencesTargetConcerned GetLink( global::Company.TestMart.Concern source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ConcernReferencesTargetConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ConcernReferencesTargetConcerned>(source, global::Company.TestMart.ConcernReferencesTargetConcerned.SourceConcernDomainRoleId);
			foreach ( global::Company.TestMart.ConcernReferencesTargetConcerned link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.TestMart
{
	/// <summary>
	/// DomainRelationship ImpactLevelHasConcerned
	/// Description for Company.TestMart.ImpactLevelHasConcerned
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.ImpactLevelHasConcerned.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.ImpactLevelHasConcerned.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ab52c304-199a-48d5-88ed-7795ae578cff")]
	public partial class ImpactLevelHasConcerned : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelHasConcerned domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xab52c304, 0x199a, 0x48d5, 0x88, 0xed, 0x77, 0x95, 0xae, 0x57, 0x8c, 0xff);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelHasConcerned link in the same Partition as the given ImpactLevel
		/// </summary>
		/// <param name="source">ImpactLevel to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public ImpactLevelHasConcerned(ImpactLevel source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelHasConcerned.ImpactLevelDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelHasConcerned.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelHasConcerned(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelHasConcerned(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelHasConcerned(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelHasConcerned(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevel domain role code
		
		/// <summary>
		/// ImpactLevel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelDomainRoleId = new global::System.Guid(0x5aabdef2, 0x24f9, 0x4dd2, 0x94, 0x1e, 0xaa, 0x93, 0x55, 0x4a, 0x78, 0x20);
		
		/// <summary>
		/// DomainRole ImpactLevel
		/// Description for Company.TestMart.ImpactLevelHasConcerned.ImpactLevel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactLevelHasConcerned/ImpactLevel.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactLevelHasConcerned/ImpactLevel.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concerned", PropertyDisplayNameKey="Company.TestMart.ImpactLevelHasConcerned/ImpactLevel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5aabdef2-24f9-4dd2-941e-aa93554a7820")]
		public virtual ImpactLevel ImpactLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevel of a Concern
		/// <summary>
		/// Gets ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpactLevel GetImpactLevel(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as ImpactLevel;
		}
		
		/// <summary>
		/// Sets ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpactLevel(Concern element, ImpactLevel newImpactLevel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newImpactLevel);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0x9b682efc, 0x8b9b, 0x4beb, 0xb4, 0xe8, 0xb2, 0x7c, 0x41, 0xf2, 0xc7, 0x7f);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.TestMart.ImpactLevelHasConcerned.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.TestMart.ImpactLevelHasConcerned/Concern.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.TestMart.ImpactLevelHasConcerned/Concern.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpactLevel", PropertyDisplayNameKey="Company.TestMart.ImpactLevelHasConcerned/Concern.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9b682efc-8b9b-4beb-b4e8-b27c41f2c77f")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concerned of a ImpactLevel
		/// <summary>
		/// Gets a list of Concerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetConcerned(ImpactLevel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, ImpactLevelDomainRoleId);
		}
		#endregion
		#region ImpactLevel link accessor
		/// <summary>
		/// Get the list of ImpactLevelHasConcerned links to a ImpactLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ImpactLevelHasConcerned> GetLinksToConcerned ( global::Company.TestMart.ImpactLevel impactLevelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelHasConcerned>(impactLevelInstance, global::Company.TestMart.ImpactLevelHasConcerned.ImpactLevelDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the ImpactLevelHasConcerned link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ImpactLevelHasConcerned GetLinkToImpactLevel (global::Company.TestMart.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactLevelHasConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelHasConcerned>(concernInstance, global::Company.TestMart.ImpactLevelHasConcerned.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpactLevelHasConcerned instance accessors
		
		/// <summary>
		/// Get any ImpactLevelHasConcerned links between a given ImpactLevel and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.TestMart.ImpactLevelHasConcerned> GetLinks( global::Company.TestMart.ImpactLevel source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.TestMart.ImpactLevelHasConcerned> outLinks = new global::System.Collections.Generic.List<global::Company.TestMart.ImpactLevelHasConcerned>();
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactLevelHasConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelHasConcerned>(source, global::Company.TestMart.ImpactLevelHasConcerned.ImpactLevelDomainRoleId);
			foreach ( global::Company.TestMart.ImpactLevelHasConcerned link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelHasConcerned link between a given ImpactLeveland a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.TestMart.ImpactLevelHasConcerned GetLink( global::Company.TestMart.ImpactLevel source, global::Company.TestMart.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.TestMart.ImpactLevelHasConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.TestMart.ImpactLevelHasConcerned>(source, global::Company.TestMart.ImpactLevelHasConcerned.ImpactLevelDomainRoleId);
			foreach ( global::Company.TestMart.ImpactLevelHasConcerned link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
