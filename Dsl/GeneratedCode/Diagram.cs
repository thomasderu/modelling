//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Company.TestMart.TestMartDiagram")]

namespace Company.TestMart
{
	/// <summary>
	/// DomainClass TestMartDiagram
	/// Description for Company.TestMart.TestMartDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Company.TestMart.TestMartDiagram.DisplayName", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.TestMart.TestMartDiagram.Description", typeof(global::Company.TestMart.TestMartDomainModel), "Company.TestMart.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.TestMart.TestMartDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2bef3602-093d-4198-b31c-1f03478c2065")]
	public partial class TestMartDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Company.TestMart.TestMartToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Company.TestMart.ImpactLevel)
			{
				global::Company.TestMart.ImpactShape newShape = new global::Company.TestMart.ImpactShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.TestMart.EnvironmentalConcern)
			{
				global::Company.TestMart.EnvironmentalShape newShape = new global::Company.TestMart.EnvironmentalShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.TestMart.SocialConcern)
			{
				global::Company.TestMart.SocialConcernShape newShape = new global::Company.TestMart.SocialConcernShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.TestMart.EconomicConcern)
			{
				global::Company.TestMart.EconomicShape newShape = new global::Company.TestMart.EconomicShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.TestMart.TechnicalConcern)
			{
				global::Company.TestMart.TechnicalShape newShape = new global::Company.TestMart.TechnicalShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Company.TestMart.ImpactShape.DecoratorsInitialized += ImpactShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.TestMart.SocialConcernShape.DecoratorsInitialized += SocialConcernShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.TestMart.EnvironmentalShape.DecoratorsInitialized += EnvironmentalShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.TestMart.EconomicShape.DecoratorsInitialized += EconomicShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ImpactShape.
		/// </summary>
		internal static partial class ImpactShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ImpactShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.TestMart.ImpactLevel.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.TestMart.ImpactLevel.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SocialConcernShape.
		/// </summary>
		internal static partial class SocialConcernShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SocialConcernShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.TestMart.SocialConcern.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EnvironmentalShape.
		/// </summary>
		internal static partial class EnvironmentalShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EnvironmentalShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.TestMart.EnvironmentalConcern.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EconomicShape.
		/// </summary>
		internal static partial class EconomicShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EconomicShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.TestMart.EconomicConcern.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// TestMartDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2bef3602, 0x093d, 0x4198, 0xb3, 0x1c, 0x1f, 0x03, 0x47, 0x8c, 0x20, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TestMartDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TestMartDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.TestMart
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Company.TestMart.ImpactLevel), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.TestMart.EnvironmentalConcern), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.TestMart.SocialConcern), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.TestMart.EconomicConcern), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.TestMart.TechnicalConcern), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::Company.TestMart.ImpactLevel)
				{
					parentElement = GetParentForImpactLevel((global::Company.TestMart.ImpactLevel)childElement);
				} else
				if(childElement is global::Company.TestMart.EnvironmentalConcern)
				{
					parentElement = GetParentForEnvironmentalConcern((global::Company.TestMart.EnvironmentalConcern)childElement);
				} else
				if(childElement is global::Company.TestMart.SocialConcern)
				{
					parentElement = GetParentForSocialConcern((global::Company.TestMart.SocialConcern)childElement);
				} else
				if(childElement is global::Company.TestMart.EconomicConcern)
				{
					parentElement = GetParentForEconomicConcern((global::Company.TestMart.EconomicConcern)childElement);
				} else
				if(childElement is global::Company.TestMart.TechnicalConcern)
				{
					parentElement = GetParentForTechnicalConcern((global::Company.TestMart.TechnicalConcern)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Company.TestMart.SoSA GetParentForImpactLevel( global::Company.TestMart.ImpactLevel root )
			{
				// Segments 0 and 1
				global::Company.TestMart.SoSA result = root.SoSA;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.TestMart.SoSA GetParentForEnvironmentalConcern( global::Company.TestMart.EnvironmentalConcern root )
			{
				// Segments 0 and 1
				global::Company.TestMart.ImpactLevel root2 = root.ImpactLevel;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.TestMart.SoSA result = root2.SoSA;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.TestMart.SoSA GetParentForSocialConcern( global::Company.TestMart.SocialConcern root )
			{
				// Segments 0 and 1
				global::Company.TestMart.ImpactLevel root2 = root.ImpactLevel;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.TestMart.SoSA result = root2.SoSA;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.TestMart.SoSA GetParentForEconomicConcern( global::Company.TestMart.EconomicConcern root )
			{
				// Segments 0 and 1
				global::Company.TestMart.ImpactLevel root2 = root.ImpactLevel;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.TestMart.SoSA result = root2.SoSA;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.TestMart.SoSA GetParentForTechnicalConcern( global::Company.TestMart.TechnicalConcern root )
			{
				// Segments 0 and 1
				global::Company.TestMart.ImpactLevel root2 = root.ImpactLevel;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Company.TestMart.SoSA result = root2.SoSA;
				if ( result == null ) return null;
				return result;
			}
		}
		
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Company.TestMart.ImpactLevel), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::Company.TestMart.ImpactLevel.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.TestMart.ImpactShape.FindImpactShapeDecorator("Name");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.TestMart.ImpactLevel.DomainClassId);
					}
				}
			}
		}
	
	}
